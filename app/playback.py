import requests
import utm
import pandas as pd
import argparse
import time


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Provide args for visualizing vehicle tracks')

    parser.add_argument('--track-log', default='assets/demo_data_2.csv', help='TrackLog generated by Sensible')

    args = vars(parser.parse_args())

    df = pd.DataFrame.from_csv(args['track_log'], index_col=0)
    df['timestamp'] = pd.to_datetime(df['timestamp'], format="%H:%M:%f")
    df = df.set_index(df['timestamp'])

    res = df.index.get_duplicates()

    period = 1. / 5

    to_delete = {}

    for i in range(len(res)):
        msgs = df[df.index == res[i]]
        for index, row in msgs.iterrows():
            if row['Filtered'] == 0:
                continue

            if row['Sensor'] == 'DSRC':
                xPos = row['xPos']
            else:
                # hardcode the centerline of the lane for now
                xPos = 365735
            lat, lon = utm.to_latlon(xPos, row['yPos'], 17, 'R')

            if row['Sensor'] == 'Radar':
                sensor = row['Sensor']
            else:
                # check if fused
                if row['Filtered'] == 2:
                    sensor = 'Fused'
                else:
                    sensor = 'DSRC'

            zombie_count = 0
            if row['TrackState'] == 'ZOMBIE':
                if row['TrackID'] in to_delete:
                    to_delete[row['TrackID']] += 1
                else:
                    to_delete[row['TrackID']] = 1

                if to_delete[row['TrackID']] == 5:
                    r = requests.post("http://localhost:3000/delete", {
                        'track_id': row['TrackID']
                    })
                    continue
                zombie_count = to_delete[row['TrackID']]

            r = requests.post("http://localhost:3000/track", {
                'track_id': row['TrackID'],
                'lat': lat, 'lon': lon,
                'sensor': sensor,
                'state': row['TrackState'],
                'zombie_count': zombie_count
            })

        time.sleep(period)
