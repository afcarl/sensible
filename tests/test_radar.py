import pytest

from sensible.tracking.track_specialist import TrackSpecialist
from sensible.sensors.radar import Radar
from sensible.sensors.DSRC import DSRC
from .sensor_emulator import SensorEmulator


def get_track_specialist(tmpdir, bsm_port=6669, run_for=20.0, frequency=5):
    """Return a standard TrackSpecialist object for testing."""
    sensor_ports = [6667, 6668]
    topic_filters = ["DSRC", "Radar"]
    sensors = {'sensor_ports': sensor_ports, 'topic_filters': topic_filters}
    p = tmpdir.mkdir("logs").join("test.txt")
    return TrackSpecialist(sensors, bsm_port, run_for, p, frequency)


def test_autonomous_vehicle_association(tmpdir):
    """
    Test that a radar detection generated by an AV is properly
    associated to it.
    :return:
    """
    dsrc_port = 4200
    radar_port = 4201

    # The radar delay should be 1 second greater than the DSRC
    dsrc_sender = SensorEmulator(port=dsrc_port, pub_freq=20,
                                 file_name="data/01-27-17-solarpark/GPS/Solar_UrbanNavi012717/suilog_1485534929.txt",
                                 delim="CSM Tx...", loop=False, delay=2, name="DSRC radio")
    radar_sender = SensorEmulator(port=radar_port, pub_freq=20,
                                  file_name="data/radar/01-27-17-Urban-suilog_1485534929.txt",
                                  delim="CSM Tx...", loop=False, delay=3.4, name="Radar")

    radar_recv = Radar("localhost", remote_port=radar_port, local_port=6668)
    dsrc_recv = DSRC("localhost", remote_port=dsrc_port, local_port=6667)

    # Connect and start the DSRC thread.
    try:
        dsrc_recv.connect()
        radar_recv.connect()
    except Exception:
        pytest.fail("Unable to connect radar and/or dsrc threads.")

    track_specialist = get_track_specialist(tmpdir, run_for=10)

    dsrc_recv.start()
    radar_recv.start()

    dsrc_sender.start()
    radar_sender.start()

    # run for 20 seconds, then exit
    track_specialist.run()

    dsrc_sender.stop()
    dsrc_recv.stop()
    radar_sender.stop()
    radar_recv.stop()
